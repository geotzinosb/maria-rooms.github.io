const CACHE_VERSION="v2.0.0",CACHE_NAME=`maria-rooms-${CACHE_VERSION}`,OLD_CACHES=["maria-rooms-v2-dev","maria-rooms-v3-prod","maria-rooms-v4-prod","maria-rooms-carousel-fix-v5","maria-rooms-production","maria-rooms-staging","maria-rooms-dev"],urlsToCache=["/","/css/style.css","/js/main.min.js","/js/swiper.js","/images/logo.svg","/images/favicon.svg","/images/logo-white.svg","/images/carousel/1.jpg","/images/carousel/2.jpg","/images/carousel/3.jpg","/images/carousel/4.jpg","/images/carousel/5.jpg","/images/carousel/6.jpg","/images/carousel/7.jpg","/images/carousel/8.jpg","/images/carousel/9.jpg","/images/carousel/10.jpg","/images/carousel/11.jpg","/images/carousel/12.jpg","/images/apartment-1.jpg","/images/apartment-2.jpg","/images/apartment-3.jpg","/images/apartment-4.jpg","/images/apartment-5.jpg","/images/apartment-6.jpg","/manifest.json"],isDevelopment=self.location.hostname==="localhost"||self.location.hostname==="127.0.0.1";self.addEventListener("install",e=>{console.log(`Service Worker installing with version ${CACHE_VERSION}...`),self.skipWaiting(),e.waitUntil(Promise.all([caches.keys().then(e=>(console.log("Clearing old caches:",e),Promise.all(e.map(e=>{if(e!==CACHE_NAME)return console.log("Deleting old cache:",e),caches.delete(e)})))),caches.open(CACHE_NAME).then(e=>(console.log("Opened new cache:",CACHE_NAME),e.addAll(urlsToCache))).catch(e=>{console.error("Cache installation failed:",e)})]))}),self.addEventListener("activate",e=>{console.log(`Service Worker activating version ${CACHE_VERSION}...`),e.waitUntil(Promise.all([caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return console.log("Deleting old cache on activate:",e),caches.delete(e)}))),self.clients.claim()]).then(()=>(console.log("Service Worker activated successfully"),self.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage({type:"FORCE_REFRESH"})})}))).catch(e=>{console.log("Service Worker activation failed:",e)}))}),self.addEventListener("fetch",e=>{const t=new URL(e.request.url);if(t.origin!==self.location.origin||e.request.method!=="GET")return;if(e.request.url.includes("livereload")||e.request.url.includes("_framework")||e.request.url.includes("hot-reload")||e.request.url.includes("localhost:1313")||e.request.url.includes("localhost:1314"))return;if(isDevelopment)e.respondWith(fetch(e.request).then(t=>{if(t.status===200){const n=t.clone();caches.open(CACHE_NAME).then(t=>{t.put(e.request,n)}).catch(e=>{console.log("Cache update failed:",e)})}return t}).catch(()=>caches.match(e.request)));else{const n=t.pathname.match(/\.(css|js|jpg|jpeg|png|svg|gif|webp|woff|woff2)$/i);n?e.respondWith(caches.match(e.request).then(t=>t?(fetch(e.request).then(t=>{if(t.status===200){const n=t.clone();caches.open(CACHE_NAME).then(t=>{t.put(e.request,n)})}}),t):fetch(e.request).then(t=>{if(t.status===200){const n=t.clone();caches.open(CACHE_NAME).then(t=>{t.put(e.request,n)})}return t}))):e.respondWith(fetch(e.request).then(t=>{if(t.status===200){const n=t.clone();caches.open(CACHE_NAME).then(t=>{t.put(e.request,n)})}return t}).catch(()=>caches.match(e.request)))}}),self.addEventListener("message",e=>{e.data&&e.data.type==="SKIP_WAITING"&&self.skipWaiting(),e.data&&e.data.type==="CLEAR_CACHE"&&e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return caches.delete(e)}))))})